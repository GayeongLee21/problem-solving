/*Problem:
You are given a matrix of size N x M, where each cell contains a non-negative integer. Your task is to find a path from the top-left cell to the bottom-right cell that maximizes the sum of the numbers along the path. You can only move down or right at each step.
Write a C++ function maxPathSum that takes in a 2D matrix grid, its dimensions N and M, and returns the maximum sum of numbers along the path.
The function should have the following signature: int maxPathSum(vector<vector<int>>& grid, int N, int M);
Constraints:
1. 1 <= N, M <= 100
2. 0 <= grid[i][j] <= 1000
You need to implement an efficient algorithm to solve this problem. Your solution should have a time complexity of O(N*M).
Example:
int main() {
    vector<vector<int>> grid = {
        {1, 3, 1},
        {1, 5, 1},
        {4, 2, 1}
    };
    int N = grid.size();
    int M = grid[0].size();

    int maxSum = maxPathSum(grid, N, M);
    cout << "Maximum path sum: " << maxSum << endl;

    return 0;
}
Output: Maximum path sum: 12
In the given example, the maximum path with the highest sum is [1, 3, 5, 2, 1], and the sum is 12.

<Soulution>*/

#include <iostream>
#include <vector>
#include <algorithm>

int maxPathSum(vector<vector<int>>& grid, int N, int M) {
    // Create a 2D dynamic programming array to store the maximum sum path values
    vector<vector<int>> dp(N, vector<int>(M, 0));
    
    // Initialize the first row and column of dp array
    dp[0][0] = grid[0][0];
    for (int i = 1; i < N; i++) {
        dp[i][0] = dp[i-1][0] + grid[i][0];
    }
    for (int j = 1; j < M; j++) {
        dp[0][j] = dp[0][j-1] + grid[0][j];
    }
    
    // Fill the dp array by choosing the maximum path sum at each cell
    for (int i = 1; i < N; i++) {
        for (int j = 1; j < M; j++) {
            dp[i][j] = grid[i][j] + max(dp[i-1][j], dp[i][j-1]);
        }
    }
    
    // Return the maximum path sum at the bottom-right cell
    return dp[N-1][M-1];
}

int main() {
    vector<vector<int>> grid = {
        {1, 3, 1},
        {1, 5, 1},
        {4, 2, 1}
    };
    int N = grid.size();
    int M = grid[0].size();

    int maxSum = maxPathSum(grid, N, M);
    cout << "Maximum path sum: " << maxSum << endl;

    return 0;
}


